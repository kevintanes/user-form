import Button from "@/components/Button";
import ModalDelete from "@/components/ModalDelete";
import ModalForm from "@/components/ModalForm";
import { db } from "@/firebase";
import { Box, Container, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from "@mui/material";
import { collection, getDocs } from "firebase/firestore";
import { Inter } from "next/font/google";
import Head from "next/head";
import { useRouter } from "next/router";
import { useState } from "react";
import { User } from "../types";

const inter = Inter({ subsets: ["latin"] });

interface GetServerSideProps {
  users: User[];
}

export default function Home(props: GetServerSideProps) {
  const router = useRouter();

  const { users } = props

  const [username, setUsername] = useState("");
  const [userId, setUserId] = useState<string>("");

  const [modalAdd, setModalAdd] = useState(false);
  const openModalAdd = () => setModalAdd(true);
  const closeModalAdd = () => setModalAdd(false);

  const [modalDelete, setModalDelete] = useState(false);
  const openModalDelete = () => setModalDelete(true);
  const closeModalDelete = () => setModalDelete(false);

  const printUserData = () => {
    return users.map((val: User, idx) => {
      return (
        <TableRow key={val.id} sx={{ "&:last-child td, &:last-child th": { border: 0 } }}>
          <TableCell typeof="button" component="th" scope="row" align="center">
            {idx + 1}
          </TableCell>
          <TableCell align="center">{val.username}</TableCell>
          <TableCell align="center">{val.email}</TableCell>
          <TableCell align="center">
            <Box display={"flex"} gap={1} justifyContent="center">
              <Button onClick={() => router.push(`/edit/${val.username}`)} variant="contained" title="Edit" />
              <Button onClick={() => handleDelete(val.username, val.id)} variant="contained" color="error" title="Delete" />
            </Box>
          </TableCell>
        </TableRow>
      );
    })
  };

  const handleDelete = (username: string, userId: string) => {
    openModalDelete();
    setUsername(username);
    setUserId(userId);
  };

  return (
    <>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container
        sx={{
          py: 2,
          bgcolor: "whitesmoke",
        }}>
        <Button title="add new user" color="info" onClick={openModalAdd} variant="contained" />
        <TableContainer component={Paper} sx={{ my: 2 }}>
          <Table aria-label="User Table">
            <TableHead>
              <TableRow>
                <TableCell align="center">#</TableCell>
                <TableCell align="center">Username</TableCell>
                <TableCell align="center">Email</TableCell>
                <TableCell align="center">Actions</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>{printUserData()}</TableBody>
          </Table>
        </TableContainer>
      </Container>

      <ModalForm modalAdd={modalAdd} closeModalAdd={closeModalAdd} />
      <ModalDelete modalDelete={modalDelete} closeModalDelete={closeModalDelete} username={username} userId={userId} />
    </>
  );
}

export async function getServerSideProps() {
  try {
    await new Promise((resolve) => setTimeout(resolve, 500));
    let users: User[] = [];
    const data = collection(db, "user");
    let getData = await getDocs(data);
    getData.docs.map((val) => {
      const usersData = val.data();
      users.push({
        id: val.id,
        username: usersData.username,
        email: usersData.email,
        phone: usersData.phone,
        address: usersData.address,
      })
    })

    return {
      props: {
        users
      },

    }

  } catch (error) {
    console.log(error);
  }
}